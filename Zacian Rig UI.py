### RigUI Script generated by Bone Manager Addon ###

import bpy

from bpy.utils import register_class, unregister_class

BM_rig_id = "BM_e1pmd8roiqlw"


class BM_PT_rigui_BM_e1pmd8roiqlw(bpy.types.Panel):
	bl_space_type = 'VIEW_3D'
	bl_region_type = 'UI'
	bl_category = 'Item'
	bl_label = "Zacian"
	bl_idname = "BM_PT_rigui_BM_e1pmd8roiqlw"


	@classmethod
	def poll(self, context):
		try:
			return (context.active_object.data.get("BM_rig_id") == BM_rig_id)
		except (AttributeError, KeyError, TypeError):
			return False

	def draw(self, context):
		arm = context.active_object.data
		bcolls = arm.collections_all
		layout = self.layout
		layout = layout.column()
		row = layout.row(align=True)

		row = layout.row(align=True)

		slot = row.row(align=True)
		button = slot.row(align=True)
		button.prop(bcolls["Root"], "is_solo", toggle=True, text="Root")
		picker = slot.row(align=True)
		op = picker.operator("bonemanex.collection_select", text="", icon="RESTRICT_SELECT_OFF")
		op.bcoll_name = "Root"
		op.arm_name = context.active_object.name
		row = layout.row(align=True)

		slot = row.row(align=True)
		button = slot.row(align=True)
		button.prop(bcolls["Switch Ik controls"], "is_solo", toggle=True, text="Switch Ik controls")
		picker = slot.row(align=True)
		op = picker.operator("bonemanex.collection_select", text="", icon="RESTRICT_SELECT_OFF")
		op.bcoll_name = "Switch Ik controls"
		op.arm_name = context.active_object.name
		slot.separator(factor=2)

		slot = row.row(align=True)
		button = slot.row(align=True)
		button.prop(bcolls["Switch NECK"], "is_solo", toggle=True, text="Switch NECK")
		picker = slot.row(align=True)
		op = picker.operator("bonemanex.collection_select", text="", icon="RESTRICT_SELECT_OFF")
		op.bcoll_name = "Switch NECK"
		op.arm_name = context.active_object.name
		row = layout.row(align=True)
		row.separator(factor=1.5)
		row = layout.row(align=True)

		slot = row.row(align=True)
		button = slot.row(align=True)
		button.prop(bcolls["Shoulders"], "is_solo", toggle=True, text="Shoulders")
		picker = slot.row(align=True)
		op = picker.operator("bonemanex.collection_select", text="", icon="RESTRICT_SELECT_OFF")
		op.bcoll_name = "Shoulders"
		op.arm_name = context.active_object.name
		row = layout.row(align=True)

		slot = row.row(align=True)
		button = slot.row(align=True)
		button.prop(bcolls["R FT Leg IK"], "is_solo", toggle=True, text="R FT Leg IK")
		picker = slot.row(align=True)
		op = picker.operator("bonemanex.collection_select", text="", icon="RESTRICT_SELECT_OFF")
		op.bcoll_name = "R FT Leg IK"
		op.arm_name = context.active_object.name
		slot.separator(factor=2)

		slot = row.row(align=True)
		button = slot.row(align=True)
		button.prop(bcolls["L FT Leg IK"], "is_solo", toggle=True, text="L FT Leg IK")
		picker = slot.row(align=True)
		op = picker.operator("bonemanex.collection_select", text="", icon="RESTRICT_SELECT_OFF")
		op.bcoll_name = "L FT Leg IK"
		op.arm_name = context.active_object.name
		row = layout.row(align=True)

		slot = row.row(align=True)
		button = slot.row(align=True)
		button.prop(bcolls["R BK Leg IK"], "is_solo", toggle=True, text="R BK Leg IK")
		picker = slot.row(align=True)
		op = picker.operator("bonemanex.collection_select", text="", icon="RESTRICT_SELECT_OFF")
		op.bcoll_name = "R BK Leg IK"
		op.arm_name = context.active_object.name
		slot.separator(factor=2)

		slot = row.row(align=True)
		button = slot.row(align=True)
		button.prop(bcolls["L BK Leg IK"], "is_solo", toggle=True, text="L BK Leg IK")
		picker = slot.row(align=True)
		op = picker.operator("bonemanex.collection_select", text="", icon="RESTRICT_SELECT_OFF")
		op.bcoll_name = "L BK Leg IK"
		op.arm_name = context.active_object.name
		row = layout.row(align=True)
		row.separator(factor=1.5)
		row = layout.row(align=True)

		slot = row.row(align=True)
		button = slot.row(align=True)
		button.prop(bcolls["R FT Leg FK"], "is_solo", toggle=True, text="R FT Leg FK")
		picker = slot.row(align=True)
		op = picker.operator("bonemanex.collection_select", text="", icon="RESTRICT_SELECT_OFF")
		op.bcoll_name = "R FT Leg FK"
		op.arm_name = context.active_object.name
		slot.separator(factor=2)

		slot = row.row(align=True)
		button = slot.row(align=True)
		button.prop(bcolls["L FT Leg FK"], "is_solo", toggle=True, text="L FT Leg FK")
		picker = slot.row(align=True)
		op = picker.operator("bonemanex.collection_select", text="", icon="RESTRICT_SELECT_OFF")
		op.bcoll_name = "L FT Leg FK"
		op.arm_name = context.active_object.name
		row = layout.row(align=True)

		slot = row.row(align=True)
		button = slot.row(align=True)
		button.prop(bcolls["R BK Leg FK"], "is_solo", toggle=True, text="R BK Leg FK")
		picker = slot.row(align=True)
		op = picker.operator("bonemanex.collection_select", text="", icon="RESTRICT_SELECT_OFF")
		op.bcoll_name = "R BK Leg FK"
		op.arm_name = context.active_object.name
		slot.separator(factor=2)

		slot = row.row(align=True)
		button = slot.row(align=True)
		button.prop(bcolls["L BK Leg FK"], "is_solo", toggle=True, text="L BK Leg FK")
		picker = slot.row(align=True)
		op = picker.operator("bonemanex.collection_select", text="", icon="RESTRICT_SELECT_OFF")
		op.bcoll_name = "L BK Leg FK"
		op.arm_name = context.active_object.name
		row = layout.row(align=True)
		row.separator(factor=1.5)
		row = layout.row(align=True)

		slot = row.row(align=True)
		button = slot.row(align=True)
		button.prop(bcolls["Spine"], "is_solo", toggle=True, text="Spine")
		picker = slot.row(align=True)
		op = picker.operator("bonemanex.collection_select", text="", icon="RESTRICT_SELECT_OFF")
		op.bcoll_name = "Spine"
		op.arm_name = context.active_object.name
		row = layout.row(align=True)

		slot = row.row(align=True)
		button = slot.row(align=True)
		button.prop(bcolls["Head"], "is_solo", toggle=True, text="Head")
		picker = slot.row(align=True)
		op = picker.operator("bonemanex.collection_select", text="", icon="RESTRICT_SELECT_OFF")
		op.bcoll_name = "Head"
		op.arm_name = context.active_object.name
		slot.separator(factor=2)

		slot = row.row(align=True)
		button = slot.row(align=True)
		button.prop(bcolls["Tail"], "is_solo", toggle=True, text="Tail")
		picker = slot.row(align=True)
		op = picker.operator("bonemanex.collection_select", text="", icon="RESTRICT_SELECT_OFF")
		op.bcoll_name = "Tail"
		op.arm_name = context.active_object.name
		button.scale_x = 2.0
		row = layout.row(align=True)
		row.separator(factor=1.5)
		row = layout.row(align=True)

		slot = row.row(align=True)
		button = slot.row(align=True)
		button.prop(bcolls["Eye"], "is_solo", toggle=True, text="Eye")
		picker = slot.row(align=True)
		op = picker.operator("bonemanex.collection_select", text="", icon="RESTRICT_SELECT_OFF")
		op.bcoll_name = "Eye"
		op.arm_name = context.active_object.name
		button.scale_x = 1.600000023841858
		slot.separator(factor=2)

		slot = row.row(align=True)
		button = slot.row(align=True)
		button.prop(bcolls["Sword"], "is_solo", toggle=True, text="Sword")
		picker = slot.row(align=True)
		op = picker.operator("bonemanex.collection_select", text="", icon="RESTRICT_SELECT_OFF")
		op.bcoll_name = "Sword"
		op.arm_name = context.active_object.name
		slot.separator(factor=2)

		slot = row.row(align=True)
		button = slot.row(align=True)
		button.prop(bcolls["Tweak"], "is_solo", toggle=True, text="Tweak")
		picker = slot.row(align=True)
		op = picker.operator("bonemanex.collection_select", text="", icon="RESTRICT_SELECT_OFF")
		op.bcoll_name = "Tweak"
		op.arm_name = context.active_object.name
		button.scale_x = 2.0
		row = layout.row(align=True)

		slot = row.row(align=True)
		button = slot.row(align=True)
		button.prop(bcolls["Hair Neck"], "is_solo", toggle=True, text="Hair Neck")
		picker = slot.row(align=True)
		op = picker.operator("bonemanex.collection_select", text="", icon="RESTRICT_SELECT_OFF")
		op.bcoll_name = "Hair Neck"
		op.arm_name = context.active_object.name
		slot.separator(factor=2)

		slot = row.row(align=True)
		button = slot.row(align=True)
		button.prop(bcolls["Hairs Head"], "is_solo", toggle=True, text="Hairs Head")
		picker = slot.row(align=True)
		op = picker.operator("bonemanex.collection_select", text="", icon="RESTRICT_SELECT_OFF")
		op.bcoll_name = "Hairs Head"
		op.arm_name = context.active_object.name
		row = layout.row(align=True)

		slot = row.row(align=True)
		button = slot.row(align=True)
		button.prop(bcolls["Hair Spine"], "is_solo", toggle=True, text="Hair Spine")
		picker = slot.row(align=True)
		op = picker.operator("bonemanex.collection_select", text="", icon="RESTRICT_SELECT_OFF")
		op.bcoll_name = "Hair Spine"
		op.arm_name = context.active_object.name
		slot.separator(factor=2)

		slot = row.row(align=True)
		button = slot.row(align=True)
		button.prop(bcolls["Hair Hips"], "is_solo", toggle=True, text="Hair Hips")
		picker = slot.row(align=True)
		op = picker.operator("bonemanex.collection_select", text="", icon="RESTRICT_SELECT_OFF")
		op.bcoll_name = "Hair Hips"
		op.arm_name = context.active_object.name


class BM_PT_dynamicPanel_BM_e1pmd8roiqlw(bpy.types.Panel):
	bl_category = 'Item'
	bl_label = ""
	bl_idname = "BM_PT_dynamicPanelBM_e1pmd8roiqlw"
	bl_space_type = 'VIEW_3D'
	bl_region_type = 'UI'
	bl_options = {'DEFAULT_CLOSED'}

	@classmethod
	def poll(self, context):
		try:
			return (context.active_object.data.get("BM_rig_id") == BM_rig_id)
		except (AttributeError, KeyError, TypeError):
			return False

	def draw(self, context):
		layout = self.layout
		ob = context.active_object
		arm = ob.data
		panels = arm.prop_collection

def get_bones(arm, context, collection, selected):
	if collection:
		bones = arm.collections_all[collection.name].bones
		if selected:
			try:
				bones = [bone for bone in bones if bone.select is True]
			except TypeError:
				return []
	elif selected and not collection:
		try:
			bones = [bone for bone in arm.bones if bone.select is True]
		except TypeError:
			return []
	else:
		bones = arm.bones
	return bones


class BMEX_OT_selectCollection(bpy.types.Operator):
	bl_idname = "bonemanex.collection_select"
	bl_label = ""
	bl_description = "Select all Bones in Collection.\nShift to add to selection. \nAlt to remove from selection"

	bcoll_name : bpy.props.StringProperty(name="Collection name", description="Name of bone collection", default="",)
	arm_name : bpy.props.StringProperty(name="Armature name", description="Name of armature", default="",)

	@classmethod
	def poll(self, context):

		return context.mode == "POSE"

	def __init__(self):
		self.shift = False
		self.alt = False

	def invoke(self, context, event):
		self.shift = event.shift
		self.alt = event.alt

		return self.execute(context)

	def execute(self, context):
		ob = context.active_object
		arm = ob.data
		bcolls = arm.collections_all
		bcoll = arm.collections_all[self.bcoll_name]

		if self.alt:
			bones = get_bones(arm, context, bcoll, True)
			for bone in bones:
				bone.select = False
				bone.select_head = False
				bone.select_tail = False

		else:
			bones = get_bones(arm, context, bcoll, False)
			if not self.shift:
				bpy.ops.pose.select_all(action="DESELECT")

			for bone in bones:
				bone.select = True
				bone.select_head = True
				bone.select_tail = True

		return {"FINISHED"}


classes = (BM_PT_rigui_BM_e1pmd8roiqlw,BMEX_OT_selectCollection, BM_PT_dynamicPanel_BM_e1pmd8roiqlw, BMEX_OT_selectCollection)

def register():
	for cls in classes:
		try:
			register_class(cls)

		except ValueError:
			pass
def unregister():
	for cls in classes:
		try:
			unregister_class(cls)

		except ValueError:
			pass


	del bpy.types.Scene.BM_e1pmd8roiqlw_presets

if __name__ == "__main__":
	register()